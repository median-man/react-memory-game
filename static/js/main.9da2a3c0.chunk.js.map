{"version":3,"sources":["components/Grid/Column.js","components/Grid/Container.js","components/Grid/Row.js","components/Thumbnail/ImgThumbnail.js","components/Thumbnail/index.js","utils.js","App.js","registerServiceWorker.js","index.js"],"names":["Column","_ref","size","children","react_default","a","createElement","className","split","map","el","concat","join","Container","Row","ImgThumbnail","props","image","classes","onClick","name","onKeyPress","role","tabIndex","aria-label","alt","src","getShuffledArray","arrayToShuffle","randomIndex","element","index","result","length","Math","floor","random","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","images","score","topScore","imgName","selectedImage","find","isClicked","resetGame","incrementScore","setState","resetImages","forEach","_this$state","_this2","imgThumbnails","Thumbnail","key","handleImgThumbnailClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9da2a3c0.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Column({ size, children }) {\n  return (\n    <div className={size.split(' ').map(el => `col-${el}`).join(' ')}>\n      {children}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Container({ children }) {\n  return (\n    <div className=\"container\">\n      {children}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Row({ children }) {\n  return <div className=\"row\">{children}</div>;\n}\n","import React from 'react';\n\nexport default (props) => {\n  const { image } = props;\n  const bootstrapThumbnail = 'img-thumbnail';\n  let className = bootstrapThumbnail;\n  if (image.classes) className += ` ${image.classes.join(' ')}`;\n  return (\n    <span\n      onClick={() => props.onClick(image.name)}\n      onKeyPress={props.onClick}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={image.name}\n    >\n      <img alt={image.alt} src={`images/${image.src}`} className={className} />\n    </span>\n  );\n};\n","import ImgThumbnail from './ImgThumbnail';\n\nexport default ImgThumbnail;\n","function getShuffledArray(arrayToShuffle) {\n  const result = arrayToShuffle;\n  let randomIndex;\n  let element;\n  let index;\n  for (index = result.length - 1; index > 0; index -= 1) {\n    randomIndex = Math.floor(Math.random() * (index + 1));\n    element = result[index];\n    result[index] = result[randomIndex];\n    result[randomIndex] = element;\n  }\n  return result;\n}\nexport default getShuffledArray;\n","import React, { Component } from 'react';\nimport { Container, Column, Row } from './components/Grid';\nimport ImgThumbnail from './components/Thumbnail';\nimport images from './images.json';\nimport getShuffledArray from './utils';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      images: getShuffledArray(images),\n      score: 0,\n      topScore: 0,\n    };\n  }\n\n  handleImgThumbnailClick(imgName) {\n    const selectedImage = this.state.images.find(image => image.name === imgName);\n    if (selectedImage.isClicked) {\n      this.resetGame();\n    } else {\n      selectedImage.isClicked = true;\n      this.incrementScore();\n    }\n    this.setState({ images: getShuffledArray(this.state.images) });\n  }\n\n  resetGame() {\n    const resetImages = this.state.images;\n    resetImages.forEach(image => (image.isClicked = false));\n    this.setState({ images: resetImages, score: 0 });\n  }\n\n  incrementScore() {\n    let { score, topScore } = this.state;\n    score += 1;\n    if (score > topScore) topScore = score;\n    this.setState({ score, topScore });\n  }\n\n  render() {\n    const imgThumbnails = this.state.images.map(image => (\n      <ImgThumbnail\n        key={image.name}\n        image={image}\n        onClick={() => this.handleImgThumbnailClick(image.name)}\n      />));\n\n    return (\n      <Container>\n        <Row>\n          <Column size=\"xs-12\">\n            <h1>Magic Memory</h1>\n          </Column>\n        </Row>\n        <Row>\n          <Column size=\"xs-12\">\n            <span>Score: {this.state.score}</span>\n            &nbsp;/&nbsp;\n            <span>Top Score: {this.state.topScore}</span>\n          </Column>\n        </Row>\n        <Row>\n          <Column size=\"xs-12\">\n            {imgThumbnails}\n          </Column>\n        </Row>\n      </Container>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}