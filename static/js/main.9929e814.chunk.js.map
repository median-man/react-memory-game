{"version":3,"sources":["components/Grid/Column.js","components/Grid/Container.js","components/Grid/Row.js","components/Thumbnail/ImgThumbnail.js","components/Thumbnail/index.js","components/Toast/index.js","utils.js","App.js","registerServiceWorker.js","lib/entities/image.js","lib/entities/game.js","lib/use-cases/index.js","lib/use-cases/new-game.js","index.js"],"names":["Column","_ref","size","children","style","react_default","a","createElement","className","split","map","el","concat","join","Container","Row","ImgThumbnail","props","image","onClick","onKeyPress","role","tabIndex","aria-label","name","alt","src","Toast","_this$props","this","heading","body","show","ToastContainer","Indicator","React","Component","styles","top","opacity","aria-live","aria-atomic","xmlns","preserveAspectRatio","focusable","width","height","fill","getShuffledArray","arrayToShuffle","randomIndex","element","index","result","Object","toConsumableArray","length","Math","floor","random","App","game","_this","newGame","state","images","score","topScore","toast","gameLost","console","log","points","setState","max","setTimeout","hideToast","objectSpread","shuffleImages","imgName","selectImage","isGameOver","isGameWon","_this2","imgThumbnails","Thumbnail","key","handleImgThumbnailClick","maxWidth","Toast_Toast","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","makeImage","missingRequiredPropertyError","isClicked","freeze","click","propertyName","Error","makeGame","find","getImage","imageData","makeNewGame","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9929e814.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Column({ size, children, style }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(' ')\r\n        .map(el => `col-${el}`)\r\n        .join(' ')}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Container({ children }) {\r\n  return (\r\n    <div className=\"container\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Row({ children, className }) {\r\n  return (\r\n    <div className={className ? `row ${className}` : 'row'}>{children}</div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n  const { image } = props;\r\n  return (\r\n    <span\r\n      onClick={props.onClick}\r\n      onKeyPress={props.onClick}\r\n      role=\"button\"\r\n      tabIndex={0}\r\n      aria-label={image.name()}\r\n      className=\"p-1 d-inline-block\"\r\n    >\r\n      <img alt={image.alt()} src={`images/${image.src()}`} className=\"img-thumbnail\" />\r\n    </span>\r\n  );\r\n};\r\n","import ImgThumbnail from './ImgThumbnail';\r\n\r\nexport default ImgThumbnail;\r\n","import React from 'react'\nimport './toast.css'\n\nexport default class Toast extends React.Component {\n  render() {\n    const { heading, body, show } = this.props\n\n    return (\n      <ToastContainer show={show}>\n        <div className=\"toast-header\">\n          <Indicator />\n          <strong className=\"mr-auto\">{heading}</strong>\n        </div>\n        <div className=\"toast-body\">{body}</div>\n      </ToastContainer>\n    )\n  }\n}\n\nfunction ToastContainer({ show, children }) {\n  const styles = {\n    top: show ? 0 : '-100px',\n    opacity: show ? 1 : 0\n  }\n\n  return (\n    <div\n      className=\"toast mt-3 mr-3\"\n      role=\"alert\"\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      style={styles}\n    >\n      {children}\n    </div>\n  )\n}\n\nfunction Indicator() {\n  const red = '#dc3545'\n\n  return (\n    <svg\n      className=\"rounded mr-2\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMidYMid slice\"\n      focusable=\"false\"\n      role=\"img\"\n      width=\"15\"\n      height=\"15\"\n    >\n      <rect fill={red} width=\"100%\" height=\"100%\" />\n    </svg>\n  )\n}\n","function getShuffledArray(arrayToShuffle) {\r\n  const result = [...arrayToShuffle];\r\n  let randomIndex;\r\n  let element;\r\n  let index;\r\n  for (index = result.length - 1; index > 0; index -= 1) {\r\n    randomIndex = Math.floor(Math.random() * (index + 1));\r\n    element = result[index];\r\n    result[index] = result[randomIndex];\r\n    result[randomIndex] = element;\r\n  }\r\n  return result;\r\n}\r\nexport default getShuffledArray;\r\n","import React, { Component } from 'react'\r\nimport { Container, Column, Row } from './components/Grid'\r\nimport ImgThumbnail from './components/Thumbnail'\r\nimport Toast from './components/Toast'\r\nimport getShuffledArray from './utils'\r\n\r\nexport default class App extends Component {\r\n  game = this.props.newGame()\r\n\r\n  state = {\r\n    images: getShuffledArray(this.game.images()),\r\n    score: 0,\r\n    topScore: 0,\r\n    toast: {\r\n      heading: '',\r\n      body: '',\r\n      show: false\r\n    }\r\n  }\r\n\r\n  handleImgThumbnailClick(imgName) {\r\n    this.game.selectImage(imgName)\r\n    this.setState({ score: this.game.points() })\r\n    if (this.game.isGameOver() && !this.game.isGameWon()) {\r\n      this.gameLost()\r\n    } else {\r\n      this.shuffleImages()\r\n    }\r\n  }\r\n\r\n  gameLost = () => {\r\n    const toast = {\r\n      heading: 'You lost',\r\n      body: `Final score: ${this.state.score}`,\r\n      show: true\r\n    }\r\n    console.log(this.game.points())\r\n    this.setState(\r\n      ({ topScore }) => ({\r\n        toast,\r\n        score: 0,\r\n        topScore: Math.max(this.game.points(), topScore)\r\n      }),\r\n      () => {\r\n        this.game = this.props.newGame()\r\n        setTimeout(this.hideToast, 1800)\r\n      }\r\n    )\r\n  }\r\n\r\n  hideToast = () =>\r\n    this.setState({ toast: { ...this.state.toast, show: false } })\r\n\r\n  shuffleImages = () =>\r\n    this.setState({ images: getShuffledArray(this.game.images()) })\r\n\r\n  render() {\r\n    const imgThumbnails = this.state.images.map(image => (\r\n      <ImgThumbnail\r\n        key={image.name()}\r\n        image={image}\r\n        onClick={() => this.handleImgThumbnailClick(image.name())}\r\n      />\r\n    ))\r\n\r\n    return (\r\n      <Container>\r\n        <h1>Magic Memory</h1>\r\n        <Row>\r\n          <Column size=\"md-8\">\r\n            <span className=\"pl-1 pr-2\">Score: {this.state.score}</span>\r\n            <span className=\"pl-2 border-left\">\r\n              Top Score: {this.state.topScore}\r\n            </span>\r\n          </Column>\r\n        </Row>\r\n        <div className=\"pt-3\">\r\n          <Row>\r\n            <Column size=\"12\" style={{ maxWidth: '500px' }}>\r\n              {imgThumbnails}\r\n            </Column>\r\n          </Row>\r\n        </div>\r\n        <Toast {...this.state.toast} />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default function makeImage({ name, src, alt }) {\r\n  if (!name) {\r\n    throw missingRequiredPropertyError('name')\r\n  }\r\n  if (!src) {\r\n    throw missingRequiredPropertyError('src')\r\n  }\r\n  if (!alt) {\r\n    throw missingRequiredPropertyError('alt')\r\n  }\r\n\r\n  let isClicked = false\r\n\r\n  return Object.freeze({\r\n    name: () => name,\r\n    src: () => src,\r\n    alt: () => alt,\r\n    isClicked: () => isClicked,\r\n    click: () => {\r\n      isClicked = true\r\n    }\r\n  })\r\n}\r\n\r\nfunction missingRequiredPropertyError(propertyName) {\r\n  return new Error(`Must have '${propertyName}'.`)\r\n}\r\n","export default function makeGame({ images }) {\r\n  if (!images || !images.length) {\r\n    throw new Error('Must have at least 1 image.')\r\n  }\r\n  \r\n  let isGameOver = false\r\n  let points = 0\r\n\r\n  const getImage = name => images.find(image => image.name() === name)\r\n\r\n  return Object.freeze({\r\n    selectImage: name => {\r\n      const image = getImage(name)\r\n      isGameOver = image.isClicked()\r\n      if (!isGameOver) {\r\n        points += 1\r\n      }\r\n      image.click()\r\n    },\r\n    isGameOver: () => isGameOver,\r\n    isGameWon: () => points === images.length,\r\n    points: () => points,\r\n    images: () => images\r\n  })\r\n}\r\n","import imageData from '../../imageData.json'\r\nimport makeNewGame from './new-game'\r\n\r\nexport const newGame = makeNewGame({ imageData })\r\n","import { makeImage, makeGame } from '../entities'\r\n\r\nexport default function makeNewGame({ imageData }) {\r\n  return function newGame() {\r\n    const images = imageData.map(makeImage)\r\n    return makeGame({ images })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport registerServiceWorker from './registerServiceWorker'\r\nimport { newGame } from './lib/use-cases'\r\n\r\nReactDOM.render(\r\n  <App newGame={newGame} />,\r\n  document.getElementById('root')\r\n)\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}